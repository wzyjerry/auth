// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type RegisterHTTPServer interface {
	Account(context.Context, *RegisterAccountRequest) (*RegisterReply, error)
	Email(context.Context, *RegisterEmailRequest) (*RegisterReply, error)
	Phone(context.Context, *RegisterPhoneRequest) (*RegisterReply, error)
	PreEmail(context.Context, *RegisterPreEmailRequest) (*emptypb.Empty, error)
	PrePhone(context.Context, *RegisterPrePhoneRequest) (*emptypb.Empty, error)
}

func RegisterRegisterHTTPServer(s *http.Server, srv RegisterHTTPServer) {
	r := s.Route("/")
	r.POST("/user/v1/register/account", _Register_Account0_HTTP_Handler(srv))
	r.POST("/user/v1/register/pre_email", _Register_PreEmail1_HTTP_Handler(srv))
	r.POST("/user/v1/register/email", _Register_Email0_HTTP_Handler(srv))
	r.POST("/user/v1/register/pre_phone", _Register_PrePhone1_HTTP_Handler(srv))
	r.POST("/user/v1/register/phone", _Register_Phone0_HTTP_Handler(srv))
}

func _Register_Account0_HTTP_Handler(srv RegisterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.Register/Account")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Account(ctx, req.(*RegisterAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Register_PreEmail1_HTTP_Handler(srv RegisterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterPreEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.Register/PreEmail")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PreEmail(ctx, req.(*RegisterPreEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Register_Email0_HTTP_Handler(srv RegisterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.Register/Email")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Email(ctx, req.(*RegisterEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Register_PrePhone1_HTTP_Handler(srv RegisterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterPrePhoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.Register/PrePhone")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PrePhone(ctx, req.(*RegisterPrePhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Register_Phone0_HTTP_Handler(srv RegisterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterPhoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.Register/Phone")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Phone(ctx, req.(*RegisterPhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

type RegisterHTTPClient interface {
	Account(ctx context.Context, req *RegisterAccountRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	Email(ctx context.Context, req *RegisterEmailRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	Phone(ctx context.Context, req *RegisterPhoneRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	PreEmail(ctx context.Context, req *RegisterPreEmailRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	PrePhone(ctx context.Context, req *RegisterPrePhoneRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type RegisterHTTPClientImpl struct {
	cc *http.Client
}

func NewRegisterHTTPClient(client *http.Client) RegisterHTTPClient {
	return &RegisterHTTPClientImpl{client}
}

func (c *RegisterHTTPClientImpl) Account(ctx context.Context, in *RegisterAccountRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/user/v1/register/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.Register/Account"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RegisterHTTPClientImpl) Email(ctx context.Context, in *RegisterEmailRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/user/v1/register/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.Register/Email"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RegisterHTTPClientImpl) Phone(ctx context.Context, in *RegisterPhoneRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/user/v1/register/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.Register/Phone"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RegisterHTTPClientImpl) PreEmail(ctx context.Context, in *RegisterPreEmailRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user/v1/register/pre_email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.Register/PreEmail"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RegisterHTTPClientImpl) PrePhone(ctx context.Context, in *RegisterPrePhoneRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user/v1/register/pre_phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.Register/PrePhone"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
