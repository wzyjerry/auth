// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.6
// source: user/v1/register.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegisterClient is the client API for Register service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterClient interface {
	Account(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	PreEmail(ctx context.Context, in *RegisterPreEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Email(ctx context.Context, in *RegisterEmailRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	PrePhone(ctx context.Context, in *RegisterPrePhoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Phone(ctx context.Context, in *RegisterPhoneRequest, opts ...grpc.CallOption) (*RegisterReply, error)
}

type registerClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterClient(cc grpc.ClientConnInterface) RegisterClient {
	return &registerClient{cc}
}

func (c *registerClient) Account(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.Register/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerClient) PreEmail(ctx context.Context, in *RegisterPreEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.user.v1.Register/PreEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerClient) Email(ctx context.Context, in *RegisterEmailRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.Register/Email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerClient) PrePhone(ctx context.Context, in *RegisterPrePhoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.user.v1.Register/PrePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerClient) Phone(ctx context.Context, in *RegisterPhoneRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.Register/Phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterServer is the server API for Register service.
// All implementations must embed UnimplementedRegisterServer
// for forward compatibility
type RegisterServer interface {
	Account(context.Context, *RegisterAccountRequest) (*RegisterReply, error)
	PreEmail(context.Context, *RegisterPreEmailRequest) (*emptypb.Empty, error)
	Email(context.Context, *RegisterEmailRequest) (*RegisterReply, error)
	PrePhone(context.Context, *RegisterPrePhoneRequest) (*emptypb.Empty, error)
	Phone(context.Context, *RegisterPhoneRequest) (*RegisterReply, error)
	mustEmbedUnimplementedRegisterServer()
}

// UnimplementedRegisterServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterServer struct {
}

func (UnimplementedRegisterServer) Account(context.Context, *RegisterAccountRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (UnimplementedRegisterServer) PreEmail(context.Context, *RegisterPreEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreEmail not implemented")
}
func (UnimplementedRegisterServer) Email(context.Context, *RegisterEmailRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Email not implemented")
}
func (UnimplementedRegisterServer) PrePhone(context.Context, *RegisterPrePhoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrePhone not implemented")
}
func (UnimplementedRegisterServer) Phone(context.Context, *RegisterPhoneRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phone not implemented")
}
func (UnimplementedRegisterServer) mustEmbedUnimplementedRegisterServer() {}

// UnsafeRegisterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterServer will
// result in compilation errors.
type UnsafeRegisterServer interface {
	mustEmbedUnimplementedRegisterServer()
}

func RegisterRegisterServer(s grpc.ServiceRegistrar, srv RegisterServer) {
	s.RegisterService(&Register_ServiceDesc, srv)
}

func _Register_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.Register/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServer).Account(ctx, req.(*RegisterAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Register_PreEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPreEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServer).PreEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.Register/PreEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServer).PreEmail(ctx, req.(*RegisterPreEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Register_Email_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServer).Email(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.Register/Email",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServer).Email(ctx, req.(*RegisterEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Register_PrePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPrePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServer).PrePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.Register/PrePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServer).PrePhone(ctx, req.(*RegisterPrePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Register_Phone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServer).Phone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.Register/Phone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServer).Phone(ctx, req.(*RegisterPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Register_ServiceDesc is the grpc.ServiceDesc for Register service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Register_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.Register",
	HandlerType: (*RegisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Account",
			Handler:    _Register_Account_Handler,
		},
		{
			MethodName: "PreEmail",
			Handler:    _Register_PreEmail_Handler,
		},
		{
			MethodName: "Email",
			Handler:    _Register_Email_Handler,
		},
		{
			MethodName: "PrePhone",
			Handler:    _Register_PrePhone_Handler,
		},
		{
			MethodName: "Phone",
			Handler:    _Register_Phone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/register.proto",
}
