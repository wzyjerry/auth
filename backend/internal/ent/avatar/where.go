// Code generated by entc, DO NOT EDIT.

package avatar

import (
	"entgo.io/ent/dialect/sql"
	"github.com/wzyjerry/auth/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v int32) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKind), v))
	})
}

// RelID applies equality check predicate on the "rel_id" field. It's identical to RelIDEQ.
func RelID(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRelID), v))
	})
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v int32) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKind), v))
	})
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v int32) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKind), v))
	})
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...int32) predicate.Avatar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Avatar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKind), v...))
	})
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...int32) predicate.Avatar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Avatar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKind), v...))
	})
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v int32) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKind), v))
	})
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v int32) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKind), v))
	})
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v int32) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKind), v))
	})
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v int32) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKind), v))
	})
}

// KindIsNil applies the IsNil predicate on the "kind" field.
func KindIsNil() predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKind)))
	})
}

// KindNotNil applies the NotNil predicate on the "kind" field.
func KindNotNil() predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKind)))
	})
}

// RelIDEQ applies the EQ predicate on the "rel_id" field.
func RelIDEQ(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRelID), v))
	})
}

// RelIDNEQ applies the NEQ predicate on the "rel_id" field.
func RelIDNEQ(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRelID), v))
	})
}

// RelIDIn applies the In predicate on the "rel_id" field.
func RelIDIn(vs ...string) predicate.Avatar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Avatar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRelID), v...))
	})
}

// RelIDNotIn applies the NotIn predicate on the "rel_id" field.
func RelIDNotIn(vs ...string) predicate.Avatar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Avatar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRelID), v...))
	})
}

// RelIDGT applies the GT predicate on the "rel_id" field.
func RelIDGT(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRelID), v))
	})
}

// RelIDGTE applies the GTE predicate on the "rel_id" field.
func RelIDGTE(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRelID), v))
	})
}

// RelIDLT applies the LT predicate on the "rel_id" field.
func RelIDLT(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRelID), v))
	})
}

// RelIDLTE applies the LTE predicate on the "rel_id" field.
func RelIDLTE(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRelID), v))
	})
}

// RelIDContains applies the Contains predicate on the "rel_id" field.
func RelIDContains(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRelID), v))
	})
}

// RelIDHasPrefix applies the HasPrefix predicate on the "rel_id" field.
func RelIDHasPrefix(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRelID), v))
	})
}

// RelIDHasSuffix applies the HasSuffix predicate on the "rel_id" field.
func RelIDHasSuffix(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRelID), v))
	})
}

// RelIDIsNil applies the IsNil predicate on the "rel_id" field.
func RelIDIsNil() predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRelID)))
	})
}

// RelIDNotNil applies the NotNil predicate on the "rel_id" field.
func RelIDNotNil() predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRelID)))
	})
}

// RelIDEqualFold applies the EqualFold predicate on the "rel_id" field.
func RelIDEqualFold(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRelID), v))
	})
}

// RelIDContainsFold applies the ContainsFold predicate on the "rel_id" field.
func RelIDContainsFold(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRelID), v))
	})
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatar), v))
	})
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.Avatar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Avatar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvatar), v...))
	})
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.Avatar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Avatar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvatar), v...))
	})
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatar), v))
	})
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatar), v))
	})
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatar), v))
	})
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatar), v))
	})
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatar), v))
	})
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatar), v))
	})
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatar), v))
	})
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvatar)))
	})
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvatar)))
	})
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatar), v))
	})
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatar), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Avatar) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Avatar) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Avatar) predicate.Avatar {
	return predicate.Avatar(func(s *sql.Selector) {
		p(s.Not())
	})
}
