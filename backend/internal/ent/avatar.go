// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/wzyjerry/auth/internal/ent/avatar"
)

// Avatar is the model entity for the Avatar schema.
type Avatar struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID string `json:"id,omitempty"`
	// Kind holds the value of the "kind" field.
	// 头像类型
	Kind *int32 `json:"kind,omitempty"`
	// RelID holds the value of the "rel_id" field.
	// 关联ID
	RelID *string `json:"rel_id,omitempty"`
	// Avatar holds the value of the "avatar" field.
	// 头像base64串
	Avatar *string `json:"avatar,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Avatar) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case avatar.FieldKind:
			values[i] = new(sql.NullInt64)
		case avatar.FieldID, avatar.FieldRelID, avatar.FieldAvatar:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Avatar", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Avatar fields.
func (a *Avatar) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case avatar.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case avatar.FieldKind:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				a.Kind = new(int32)
				*a.Kind = int32(value.Int64)
			}
		case avatar.FieldRelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rel_id", values[i])
			} else if value.Valid {
				a.RelID = new(string)
				*a.RelID = value.String
			}
		case avatar.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				a.Avatar = new(string)
				*a.Avatar = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Avatar.
// Note that you need to call Avatar.Unwrap() before calling this method if this Avatar
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Avatar) Update() *AvatarUpdateOne {
	return (&AvatarClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Avatar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Avatar) Unwrap() *Avatar {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Avatar is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Avatar) String() string {
	var builder strings.Builder
	builder.WriteString("Avatar(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	if v := a.Kind; v != nil {
		builder.WriteString(", kind=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := a.RelID; v != nil {
		builder.WriteString(", rel_id=")
		builder.WriteString(*v)
	}
	if v := a.Avatar; v != nil {
		builder.WriteString(", avatar=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Avatars is a parsable slice of Avatar.
type Avatars []*Avatar

func (a Avatars) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
