// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wzyjerry/auth/internal/ent/application"
	"github.com/wzyjerry/auth/internal/ent/predicate"
	"github.com/wzyjerry/auth/internal/ent/schema/applicationNested"
)

// ApplicationUpdate is the builder for updating Application entities.
type ApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (au *ApplicationUpdate) Where(ps ...predicate.Application) *ApplicationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *ApplicationUpdate) SetName(s string) *ApplicationUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableName(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// ClearName clears the value of the "name" field.
func (au *ApplicationUpdate) ClearName() *ApplicationUpdate {
	au.mutation.ClearName()
	return au
}

// SetHomepage sets the "homepage" field.
func (au *ApplicationUpdate) SetHomepage(s string) *ApplicationUpdate {
	au.mutation.SetHomepage(s)
	return au
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableHomepage(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetHomepage(*s)
	}
	return au
}

// ClearHomepage clears the value of the "homepage" field.
func (au *ApplicationUpdate) ClearHomepage() *ApplicationUpdate {
	au.mutation.ClearHomepage()
	return au
}

// SetDescription sets the "description" field.
func (au *ApplicationUpdate) SetDescription(s string) *ApplicationUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableDescription(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *ApplicationUpdate) ClearDescription() *ApplicationUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetCallback sets the "callback" field.
func (au *ApplicationUpdate) SetCallback(s string) *ApplicationUpdate {
	au.mutation.SetCallback(s)
	return au
}

// SetNillableCallback sets the "callback" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableCallback(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetCallback(*s)
	}
	return au
}

// ClearCallback clears the value of the "callback" field.
func (au *ApplicationUpdate) ClearCallback() *ApplicationUpdate {
	au.mutation.ClearCallback()
	return au
}

// SetAdmin sets the "admin" field.
func (au *ApplicationUpdate) SetAdmin(s string) *ApplicationUpdate {
	au.mutation.SetAdmin(s)
	return au
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableAdmin(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetAdmin(*s)
	}
	return au
}

// ClearAdmin clears the value of the "admin" field.
func (au *ApplicationUpdate) ClearAdmin() *ApplicationUpdate {
	au.mutation.ClearAdmin()
	return au
}

// SetClientID sets the "client_id" field.
func (au *ApplicationUpdate) SetClientID(s string) *ApplicationUpdate {
	au.mutation.SetClientID(s)
	return au
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableClientID(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetClientID(*s)
	}
	return au
}

// ClearClientID clears the value of the "client_id" field.
func (au *ApplicationUpdate) ClearClientID() *ApplicationUpdate {
	au.mutation.ClearClientID()
	return au
}

// SetClientSecrets sets the "client_secrets" field.
func (au *ApplicationUpdate) SetClientSecrets(ans []*applicationNested.ClientSecret) *ApplicationUpdate {
	au.mutation.SetClientSecrets(ans)
	return au
}

// ClearClientSecrets clears the value of the "client_secrets" field.
func (au *ApplicationUpdate) ClearClientSecrets() *ApplicationUpdate {
	au.mutation.ClearClientSecrets()
	return au
}

// Mutation returns the ApplicationMutation object of the builder.
func (au *ApplicationUpdate) Mutation() *ApplicationMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApplicationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApplicationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApplicationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   application.Table,
			Columns: application.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: application.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldName,
		})
	}
	if au.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldName,
		})
	}
	if value, ok := au.mutation.Homepage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldHomepage,
		})
	}
	if au.mutation.HomepageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldHomepage,
		})
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldDescription,
		})
	}
	if au.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldDescription,
		})
	}
	if value, ok := au.mutation.Callback(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldCallback,
		})
	}
	if au.mutation.CallbackCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldCallback,
		})
	}
	if value, ok := au.mutation.Admin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldAdmin,
		})
	}
	if au.mutation.AdminCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldAdmin,
		})
	}
	if value, ok := au.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldClientID,
		})
	}
	if au.mutation.ClientIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldClientID,
		})
	}
	if value, ok := au.mutation.ClientSecrets(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: application.FieldClientSecrets,
		})
	}
	if au.mutation.ClientSecretsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: application.FieldClientSecrets,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ApplicationUpdateOne is the builder for updating a single Application entity.
type ApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationMutation
}

// SetName sets the "name" field.
func (auo *ApplicationUpdateOne) SetName(s string) *ApplicationUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableName(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// ClearName clears the value of the "name" field.
func (auo *ApplicationUpdateOne) ClearName() *ApplicationUpdateOne {
	auo.mutation.ClearName()
	return auo
}

// SetHomepage sets the "homepage" field.
func (auo *ApplicationUpdateOne) SetHomepage(s string) *ApplicationUpdateOne {
	auo.mutation.SetHomepage(s)
	return auo
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableHomepage(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetHomepage(*s)
	}
	return auo
}

// ClearHomepage clears the value of the "homepage" field.
func (auo *ApplicationUpdateOne) ClearHomepage() *ApplicationUpdateOne {
	auo.mutation.ClearHomepage()
	return auo
}

// SetDescription sets the "description" field.
func (auo *ApplicationUpdateOne) SetDescription(s string) *ApplicationUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableDescription(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *ApplicationUpdateOne) ClearDescription() *ApplicationUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetCallback sets the "callback" field.
func (auo *ApplicationUpdateOne) SetCallback(s string) *ApplicationUpdateOne {
	auo.mutation.SetCallback(s)
	return auo
}

// SetNillableCallback sets the "callback" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableCallback(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetCallback(*s)
	}
	return auo
}

// ClearCallback clears the value of the "callback" field.
func (auo *ApplicationUpdateOne) ClearCallback() *ApplicationUpdateOne {
	auo.mutation.ClearCallback()
	return auo
}

// SetAdmin sets the "admin" field.
func (auo *ApplicationUpdateOne) SetAdmin(s string) *ApplicationUpdateOne {
	auo.mutation.SetAdmin(s)
	return auo
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableAdmin(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetAdmin(*s)
	}
	return auo
}

// ClearAdmin clears the value of the "admin" field.
func (auo *ApplicationUpdateOne) ClearAdmin() *ApplicationUpdateOne {
	auo.mutation.ClearAdmin()
	return auo
}

// SetClientID sets the "client_id" field.
func (auo *ApplicationUpdateOne) SetClientID(s string) *ApplicationUpdateOne {
	auo.mutation.SetClientID(s)
	return auo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableClientID(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetClientID(*s)
	}
	return auo
}

// ClearClientID clears the value of the "client_id" field.
func (auo *ApplicationUpdateOne) ClearClientID() *ApplicationUpdateOne {
	auo.mutation.ClearClientID()
	return auo
}

// SetClientSecrets sets the "client_secrets" field.
func (auo *ApplicationUpdateOne) SetClientSecrets(ans []*applicationNested.ClientSecret) *ApplicationUpdateOne {
	auo.mutation.SetClientSecrets(ans)
	return auo
}

// ClearClientSecrets clears the value of the "client_secrets" field.
func (auo *ApplicationUpdateOne) ClearClientSecrets() *ApplicationUpdateOne {
	auo.mutation.ClearClientSecrets()
	return auo
}

// Mutation returns the ApplicationMutation object of the builder.
func (auo *ApplicationUpdateOne) Mutation() *ApplicationMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApplicationUpdateOne) Select(field string, fields ...string) *ApplicationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Application entity.
func (auo *ApplicationUpdateOne) Save(ctx context.Context) (*Application, error) {
	var (
		err  error
		node *Application
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApplicationUpdateOne) SaveX(ctx context.Context) *Application {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ApplicationUpdateOne) sqlSave(ctx context.Context) (_node *Application, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   application.Table,
			Columns: application.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: application.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Application.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, application.FieldID)
		for _, f := range fields {
			if !application.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != application.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldName,
		})
	}
	if auo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldName,
		})
	}
	if value, ok := auo.mutation.Homepage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldHomepage,
		})
	}
	if auo.mutation.HomepageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldHomepage,
		})
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldDescription,
		})
	}
	if auo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldDescription,
		})
	}
	if value, ok := auo.mutation.Callback(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldCallback,
		})
	}
	if auo.mutation.CallbackCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldCallback,
		})
	}
	if value, ok := auo.mutation.Admin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldAdmin,
		})
	}
	if auo.mutation.AdminCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldAdmin,
		})
	}
	if value, ok := auo.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldClientID,
		})
	}
	if auo.mutation.ClientIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldClientID,
		})
	}
	if value, ok := auo.mutation.ClientSecrets(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: application.FieldClientSecrets,
		})
	}
	if auo.mutation.ClientSecretsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: application.FieldClientSecrets,
		})
	}
	_node = &Application{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
