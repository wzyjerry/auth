// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wzyjerry/auth/internal/ent/authenticator"
	"github.com/wzyjerry/auth/internal/ent/schema/authenticatorNested"
)

// AuthenticatorCreate is the builder for creating a Authenticator entity.
type AuthenticatorCreate struct {
	config
	mutation *AuthenticatorMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ac *AuthenticatorCreate) SetUserID(s string) *AuthenticatorCreate {
	ac.mutation.SetUserID(s)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *AuthenticatorCreate) SetNillableUserID(s *string) *AuthenticatorCreate {
	if s != nil {
		ac.SetUserID(*s)
	}
	return ac
}

// SetKind sets the "kind" field.
func (ac *AuthenticatorCreate) SetKind(i int32) *AuthenticatorCreate {
	ac.mutation.SetKind(i)
	return ac
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ac *AuthenticatorCreate) SetNillableKind(i *int32) *AuthenticatorCreate {
	if i != nil {
		ac.SetKind(*i)
	}
	return ac
}

// SetUnique sets the "unique" field.
func (ac *AuthenticatorCreate) SetUnique(an *authenticatorNested.Unique) *AuthenticatorCreate {
	ac.mutation.SetUnique(an)
	return ac
}

// SetID sets the "id" field.
func (ac *AuthenticatorCreate) SetID(s string) *AuthenticatorCreate {
	ac.mutation.SetID(s)
	return ac
}

// Mutation returns the AuthenticatorMutation object of the builder.
func (ac *AuthenticatorCreate) Mutation() *AuthenticatorMutation {
	return ac.mutation
}

// Save creates the Authenticator in the database.
func (ac *AuthenticatorCreate) Save(ctx context.Context) (*Authenticator, error) {
	var (
		err  error
		node *Authenticator
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthenticatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AuthenticatorCreate) SaveX(ctx context.Context) *Authenticator {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AuthenticatorCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AuthenticatorCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AuthenticatorCreate) check() error {
	return nil
}

func (ac *AuthenticatorCreate) sqlSave(ctx context.Context) (*Authenticator, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Authenticator.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (ac *AuthenticatorCreate) createSpec() (*Authenticator, *sqlgraph.CreateSpec) {
	var (
		_node = &Authenticator{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authenticator.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: authenticator.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authenticator.FieldUserID,
		})
		_node.UserID = &value
	}
	if value, ok := ac.mutation.Kind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: authenticator.FieldKind,
		})
		_node.Kind = &value
	}
	if value, ok := ac.mutation.Unique(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: authenticator.FieldUnique,
		})
		_node.Unique = value
	}
	return _node, _spec
}

// AuthenticatorCreateBulk is the builder for creating many Authenticator entities in bulk.
type AuthenticatorCreateBulk struct {
	config
	builders []*AuthenticatorCreate
}

// Save creates the Authenticator entities in the database.
func (acb *AuthenticatorCreateBulk) Save(ctx context.Context) ([]*Authenticator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Authenticator, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthenticatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AuthenticatorCreateBulk) SaveX(ctx context.Context) []*Authenticator {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AuthenticatorCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AuthenticatorCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
