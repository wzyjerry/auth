// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: oauth2/v1/oauth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthorizeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthorizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizeRequestMultiError, or nil if none found.
func (m *AuthorizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResponseType

	// no validation rules for ClientId

	if uri, err := url.Parse(m.GetRedirectUri()); err != nil {
		err = AuthorizeRequestValidationError{
			field:  "RedirectUri",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := AuthorizeRequestValidationError{
			field:  "RedirectUri",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Scope

	if m.Nonce != nil {
		// no validation rules for Nonce
	}

	if len(errors) > 0 {
		return AuthorizeRequestMultiError(errors)
	}

	return nil
}

// AuthorizeRequestMultiError is an error wrapping multiple validation errors
// returned by AuthorizeRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthorizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeRequestMultiError) AllErrors() []error { return m }

// AuthorizeRequestValidationError is the validation error returned by
// AuthorizeRequest.Validate if the designated constraints aren't met.
type AuthorizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeRequestValidationError) ErrorName() string { return "AuthorizeRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthorizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeRequestValidationError{}

// Validate checks the field values on AuthorizeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthorizeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthorizeReplyMultiError,
// or nil if none found.
func (m *AuthorizeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if m.IdToken != nil {
		// no validation rules for IdToken
	}

	if len(errors) > 0 {
		return AuthorizeReplyMultiError(errors)
	}

	return nil
}

// AuthorizeReplyMultiError is an error wrapping multiple validation errors
// returned by AuthorizeReply.ValidateAll() if the designated constraints
// aren't met.
type AuthorizeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeReplyMultiError) AllErrors() []error { return m }

// AuthorizeReplyValidationError is the validation error returned by
// AuthorizeReply.Validate if the designated constraints aren't met.
type AuthorizeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeReplyValidationError) ErrorName() string { return "AuthorizeReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthorizeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeReplyValidationError{}

// Validate checks the field values on PreAuthorizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreAuthorizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreAuthorizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreAuthorizeRequestMultiError, or nil if none found.
func (m *PreAuthorizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreAuthorizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResponseType

	// no validation rules for ClientId

	if uri, err := url.Parse(m.GetRedirectUri()); err != nil {
		err = PreAuthorizeRequestValidationError{
			field:  "RedirectUri",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := PreAuthorizeRequestValidationError{
			field:  "RedirectUri",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Scope

	if len(errors) > 0 {
		return PreAuthorizeRequestMultiError(errors)
	}

	return nil
}

// PreAuthorizeRequestMultiError is an error wrapping multiple validation
// errors returned by PreAuthorizeRequest.ValidateAll() if the designated
// constraints aren't met.
type PreAuthorizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreAuthorizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreAuthorizeRequestMultiError) AllErrors() []error { return m }

// PreAuthorizeRequestValidationError is the validation error returned by
// PreAuthorizeRequest.Validate if the designated constraints aren't met.
type PreAuthorizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreAuthorizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreAuthorizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreAuthorizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreAuthorizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreAuthorizeRequestValidationError) ErrorName() string {
	return "PreAuthorizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PreAuthorizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreAuthorizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreAuthorizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreAuthorizeRequestValidationError{}

// Validate checks the field values on PreAuthorizeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PreAuthorizeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreAuthorizeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreAuthorizeReplyMultiError, or nil if none found.
func (m *PreAuthorizeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PreAuthorizeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Homepage

	if m.Logo != nil {
		// no validation rules for Logo
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return PreAuthorizeReplyMultiError(errors)
	}

	return nil
}

// PreAuthorizeReplyMultiError is an error wrapping multiple validation errors
// returned by PreAuthorizeReply.ValidateAll() if the designated constraints
// aren't met.
type PreAuthorizeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreAuthorizeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreAuthorizeReplyMultiError) AllErrors() []error { return m }

// PreAuthorizeReplyValidationError is the validation error returned by
// PreAuthorizeReply.Validate if the designated constraints aren't met.
type PreAuthorizeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreAuthorizeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreAuthorizeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreAuthorizeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreAuthorizeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreAuthorizeReplyValidationError) ErrorName() string {
	return "PreAuthorizeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PreAuthorizeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreAuthorizeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreAuthorizeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreAuthorizeReplyValidationError{}

// Validate checks the field values on OAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OAuthMultiError, or nil if none found.
func (m *OAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Homepage

	// no validation rules for Code

	if m.Logo != nil {
		// no validation rules for Logo
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.IdToken != nil {
		// no validation rules for IdToken
	}

	if len(errors) > 0 {
		return OAuthMultiError(errors)
	}

	return nil
}

// OAuthMultiError is an error wrapping multiple validation errors returned by
// OAuth.ValidateAll() if the designated constraints aren't met.
type OAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthMultiError) AllErrors() []error { return m }

// OAuthValidationError is the validation error returned by OAuth.Validate if
// the designated constraints aren't met.
type OAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthValidationError) ErrorName() string { return "OAuthValidationError" }

// Error satisfies the builtin error interface
func (e OAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthValidationError{}

// Validate checks the field values on TokenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenRequestMultiError, or
// nil if none found.
func (m *TokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantType

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.RefreshToken != nil {
		// no validation rules for RefreshToken
	}

	if len(errors) > 0 {
		return TokenRequestMultiError(errors)
	}

	return nil
}

// TokenRequestMultiError is an error wrapping multiple validation errors
// returned by TokenRequest.ValidateAll() if the designated constraints aren't met.
type TokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenRequestMultiError) AllErrors() []error { return m }

// TokenRequestValidationError is the validation error returned by
// TokenRequest.Validate if the designated constraints aren't met.
type TokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRequestValidationError) ErrorName() string { return "TokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e TokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRequestValidationError{}

// Validate checks the field values on TokenReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenReplyMultiError, or
// nil if none found.
func (m *TokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenType

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	// no validation rules for Scope

	if m.RefreshToken != nil {
		// no validation rules for RefreshToken
	}

	if m.IdToken != nil {
		// no validation rules for IdToken
	}

	if len(errors) > 0 {
		return TokenReplyMultiError(errors)
	}

	return nil
}

// TokenReplyMultiError is an error wrapping multiple validation errors
// returned by TokenReply.ValidateAll() if the designated constraints aren't met.
type TokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenReplyMultiError) AllErrors() []error { return m }

// TokenReplyValidationError is the validation error returned by
// TokenReply.Validate if the designated constraints aren't met.
type TokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenReplyValidationError) ErrorName() string { return "TokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e TokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenReplyValidationError{}
