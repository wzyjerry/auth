// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type OAuth2ServiceHTTPServer interface {
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeReply, error)
	PreAuthorize(context.Context, *PreAuthorizeRequest) (*PreAuthorizeReply, error)
	Token(context.Context, *TokenRequest) (*TokenReply, error)
}

func RegisterOAuth2ServiceHTTPServer(s *http.Server, srv OAuth2ServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/oauth2/v1/pre_authorize", _OAuth2Service_PreAuthorize0_HTTP_Handler(srv))
	r.POST("/oauth2/v1/authorize", _OAuth2Service_Authorize0_HTTP_Handler(srv))
	r.POST("/oauth2/v1/token", _OAuth2Service_Token0_HTTP_Handler(srv))
}

func _OAuth2Service_PreAuthorize0_HTTP_Handler(srv OAuth2ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PreAuthorizeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.oauth2.v1.OAuth2Service/PreAuthorize")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PreAuthorize(ctx, req.(*PreAuthorizeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PreAuthorizeReply)
		return ctx.Result(200, reply)
	}
}

func _OAuth2Service_Authorize0_HTTP_Handler(srv OAuth2ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthorizeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.oauth2.v1.OAuth2Service/Authorize")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Authorize(ctx, req.(*AuthorizeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthorizeReply)
		return ctx.Result(200, reply)
	}
}

func _OAuth2Service_Token0_HTTP_Handler(srv OAuth2ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.oauth2.v1.OAuth2Service/Token")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Token(ctx, req.(*TokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TokenReply)
		return ctx.Result(200, reply)
	}
}

type OAuth2ServiceHTTPClient interface {
	Authorize(ctx context.Context, req *AuthorizeRequest, opts ...http.CallOption) (rsp *AuthorizeReply, err error)
	PreAuthorize(ctx context.Context, req *PreAuthorizeRequest, opts ...http.CallOption) (rsp *PreAuthorizeReply, err error)
	Token(ctx context.Context, req *TokenRequest, opts ...http.CallOption) (rsp *TokenReply, err error)
}

type OAuth2ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOAuth2ServiceHTTPClient(client *http.Client) OAuth2ServiceHTTPClient {
	return &OAuth2ServiceHTTPClientImpl{client}
}

func (c *OAuth2ServiceHTTPClientImpl) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...http.CallOption) (*AuthorizeReply, error) {
	var out AuthorizeReply
	pattern := "/oauth2/v1/authorize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.oauth2.v1.OAuth2Service/Authorize"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OAuth2ServiceHTTPClientImpl) PreAuthorize(ctx context.Context, in *PreAuthorizeRequest, opts ...http.CallOption) (*PreAuthorizeReply, error) {
	var out PreAuthorizeReply
	pattern := "/oauth2/v1/pre_authorize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.oauth2.v1.OAuth2Service/PreAuthorize"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OAuth2ServiceHTTPClientImpl) Token(ctx context.Context, in *TokenRequest, opts ...http.CallOption) (*TokenReply, error) {
	var out TokenReply
	pattern := "/oauth2/v1/token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.oauth2.v1.OAuth2Service/Token"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
