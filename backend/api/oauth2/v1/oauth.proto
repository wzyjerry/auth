syntax = "proto3";

package api.oauth2.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
option go_package = "api/oauth2/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    security_definitions: {
        security: {
            key: "bearer"
            value: {
                type: TYPE_API_KEY
                in: IN_HEADER
                name: "Authorization"
                description: "需要AuthToken, prefixed by Bearer: Bearer <token>"
            }
        }
    }
};

message AuthorizeRequest {
    string response_type = 1;
    string client_id = 2;
    string redirect_uri = 3 [(validate.rules).string.uri = true];
    string scope = 4;
    optional string nonce = 5;
}

message AuthorizeReply {
    string code = 1;
    optional string id_token = 2;
}

message PreAuthorizeRequest {
    string response_type = 1;
    string client_id = 2;
    string redirect_uri = 3 [(validate.rules).string.uri = true];
    string scope = 4;
}

message PreAuthorizeReply {
    string name = 1;
    optional string logo = 2;
    string homepage = 3;
    optional string description = 4;
    string owner = 5;
    string nickname = 6;
}

message OAuth {
    string name = 1;
    optional string logo = 2;
    string homepage = 3;
    optional string description = 4;
    string code = 5;
    optional string id_token = 6;
}

message TokenRequest {
    string grant_type = 1;
    string client_id = 2;
    string client_secret = 3;
    optional string code = 4;
    optional string refresh_token = 5;
}

message TokenReply {
    string token_type = 1;
    string access_token = 2;
    int64 expires_in = 3;
    string scope = 4;
    optional string refresh_token = 5;
    optional string id_token = 6;
}

service OAuth2Service {
    rpc PreAuthorize(PreAuthorizeRequest) returns (PreAuthorizeReply) {
        option (google.api.http) = {
            post: "/oauth2/v1/pre_authorize"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "bearer"
                }
            }
        };
    }
    rpc Authorize(AuthorizeRequest) returns (AuthorizeReply) {
        option (google.api.http) = {
            post: "/oauth2/v1/authorize"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "bearer"
                }
            }
        };
    }
    rpc Token(TokenRequest) returns (TokenReply) {
        option (google.api.http) = {
            post: "/oauth2/v1/token"
            body: "*"
        };
    }
}
