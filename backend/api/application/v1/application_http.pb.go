// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ApplicationServiceHTTPServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	GenerateClientSecret(context.Context, *GenerateClientSecretRequest) (*GenerateClientSecretReply, error)
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveReply, error)
	RevokeClientSecret(context.Context, *RevokeClientSecretRequest) (*emptypb.Empty, error)
	Update(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	UploadLogo(context.Context, *UploadLogoRequest) (*emptypb.Empty, error)
}

func RegisterApplicationServiceHTTPServer(s *http.Server, srv ApplicationServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/application/v1", _ApplicationService_Create0_HTTP_Handler(srv))
	r.GET("/application/v1/{id}", _ApplicationService_Retrieve0_HTTP_Handler(srv))
	r.POST("/application/v1/{id}/generateClientSecret", _ApplicationService_GenerateClientSecret0_HTTP_Handler(srv))
	r.DELETE("/application/v1/{id}/{secret_id}", _ApplicationService_RevokeClientSecret0_HTTP_Handler(srv))
	r.PUT("/application/v1/{id}/uploadLogo", _ApplicationService_UploadLogo0_HTTP_Handler(srv))
	r.PUT("/application/v1/{id}", _ApplicationService_Update0_HTTP_Handler(srv))
}

func _ApplicationService_Create0_HTTP_Handler(srv ApplicationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.application.v1.ApplicationService/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*CreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReply)
		return ctx.Result(200, reply)
	}
}

func _ApplicationService_Retrieve0_HTTP_Handler(srv ApplicationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RetrieveRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.application.v1.ApplicationService/Retrieve")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Retrieve(ctx, req.(*RetrieveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RetrieveReply)
		return ctx.Result(200, reply)
	}
}

func _ApplicationService_GenerateClientSecret0_HTTP_Handler(srv ApplicationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateClientSecretRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.application.v1.ApplicationService/GenerateClientSecret")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateClientSecret(ctx, req.(*GenerateClientSecretRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateClientSecretReply)
		return ctx.Result(200, reply)
	}
}

func _ApplicationService_RevokeClientSecret0_HTTP_Handler(srv ApplicationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RevokeClientSecretRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.application.v1.ApplicationService/RevokeClientSecret")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeClientSecret(ctx, req.(*RevokeClientSecretRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ApplicationService_UploadLogo0_HTTP_Handler(srv ApplicationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadLogoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.application.v1.ApplicationService/UploadLogo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadLogo(ctx, req.(*UploadLogoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ApplicationService_Update0_HTTP_Handler(srv ApplicationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.application.v1.ApplicationService/Update")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ApplicationServiceHTTPClient interface {
	Create(ctx context.Context, req *CreateRequest, opts ...http.CallOption) (rsp *CreateReply, err error)
	GenerateClientSecret(ctx context.Context, req *GenerateClientSecretRequest, opts ...http.CallOption) (rsp *GenerateClientSecretReply, err error)
	Retrieve(ctx context.Context, req *RetrieveRequest, opts ...http.CallOption) (rsp *RetrieveReply, err error)
	RevokeClientSecret(ctx context.Context, req *RevokeClientSecretRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Update(ctx context.Context, req *UpdateRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UploadLogo(ctx context.Context, req *UploadLogoRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ApplicationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewApplicationServiceHTTPClient(client *http.Client) ApplicationServiceHTTPClient {
	return &ApplicationServiceHTTPClientImpl{client}
}

func (c *ApplicationServiceHTTPClientImpl) Create(ctx context.Context, in *CreateRequest, opts ...http.CallOption) (*CreateReply, error) {
	var out CreateReply
	pattern := "/application/v1"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.application.v1.ApplicationService/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApplicationServiceHTTPClientImpl) GenerateClientSecret(ctx context.Context, in *GenerateClientSecretRequest, opts ...http.CallOption) (*GenerateClientSecretReply, error) {
	var out GenerateClientSecretReply
	pattern := "/application/v1/{id}/generateClientSecret"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.application.v1.ApplicationService/GenerateClientSecret"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApplicationServiceHTTPClientImpl) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...http.CallOption) (*RetrieveReply, error) {
	var out RetrieveReply
	pattern := "/application/v1/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.application.v1.ApplicationService/Retrieve"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApplicationServiceHTTPClientImpl) RevokeClientSecret(ctx context.Context, in *RevokeClientSecretRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/application/v1/{id}/{secret_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.application.v1.ApplicationService/RevokeClientSecret"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApplicationServiceHTTPClientImpl) Update(ctx context.Context, in *UpdateRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/application/v1/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.application.v1.ApplicationService/Update"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApplicationServiceHTTPClientImpl) UploadLogo(ctx context.Context, in *UploadLogoRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/application/v1/{id}/uploadLogo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.application.v1.ApplicationService/UploadLogo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
