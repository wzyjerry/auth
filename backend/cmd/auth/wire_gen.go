// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/wzyjerry/auth/internal/biz/applicationBiz"
	"github.com/wzyjerry/auth/internal/biz/oauth2Biz"
	"github.com/wzyjerry/auth/internal/biz/userBiz"
	"github.com/wzyjerry/auth/internal/biz/userBiz/third_party/github"
	"github.com/wzyjerry/auth/internal/biz/userBiz/third_party/microsoft"
	"github.com/wzyjerry/auth/internal/conf"
	"github.com/wzyjerry/auth/internal/data"
	"github.com/wzyjerry/auth/internal/server"
	"github.com/wzyjerry/auth/internal/service/applicationService"
	"github.com/wzyjerry/auth/internal/service/oauth2Service"
	"github.com/wzyjerry/auth/internal/service/userService"
	"github.com/wzyjerry/auth/internal/util"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, security *conf.Security, thirdParty *conf.ThirdParty, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData)
	aliyunHelper := util.NewAliyunHelper(logger, security)
	registerUsecase := userBiz.NewRegisterUsecase(userRepo, security, aliyunHelper, logger)
	registerService := userService.NewRegisterService(registerUsecase)
	privateKey := data.NewPrivateKey(security, logger)
	tokenHelper := util.NewTokenHelper(security, privateKey)
	userBizThirdParty := github.New(thirdParty)
	thirdParty2 := microsoft.New(thirdParty)
	loginUsecase := userBiz.NewLoginUsecase(userRepo, security, tokenHelper, aliyunHelper, registerUsecase, userBizThirdParty, thirdParty2)
	loginService := userService.NewLoginService(loginUsecase, security, tokenHelper)
	profileUsecase := userBiz.NewProfileUsecase(userRepo)
	profileService := userService.NewProfileService(profileUsecase, security, tokenHelper)
	applicationRepo := data.NewApplicationRepo(dataData)
	applicationUsecase := applicationBiz.NewApplicationUsecase(applicationRepo)
	applicationServiceApplicationService := applicationService.NewApplicationService(applicationUsecase, tokenHelper)
	oAuth2Repo := data.NewOAuth2Repo(dataData)
	oAuth2Usecase := oauth2Biz.NewOAuth2Usecase(oAuth2Repo, security, tokenHelper)
	oAuth2Service := oauth2Service.NewOAuth2Service(oAuth2Usecase, security, tokenHelper)
	httpServer := server.NewHTTPServer(confServer, logger, registerService, loginService, profileService, applicationServiceApplicationService, oAuth2Service)
	grpcServer := server.NewGRPCServer(confServer, logger, registerService, loginService, profileService, applicationServiceApplicationService, oAuth2Service)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
