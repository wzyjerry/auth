// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/wzyjerry/auth/internal/biz"
	"github.com/wzyjerry/auth/internal/conf"
	"github.com/wzyjerry/auth/internal/data"
	"github.com/wzyjerry/auth/internal/server"
	"github.com/wzyjerry/auth/internal/service"
	"github.com/wzyjerry/auth/internal/util"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, security *conf.Security, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, security, logger)
	aliyunHelper := util.NewAliyunHelper(logger, security)
	registerUsecase := biz.NewRegisterUsecase(userRepo, security, aliyunHelper)
	registerService := service.NewRegisterService(registerUsecase)
	privateKey := data.NewPrivateKey(security, logger)
	tokenHelper := util.NewTokenHelper(security, privateKey)
	loginUsecase := biz.NewLoginUsecase(userRepo, security, tokenHelper, aliyunHelper, registerUsecase)
	loginService := service.NewLoginService(loginUsecase, security, tokenHelper)
	httpServer := server.NewHTTPServer(confServer, logger, registerService, loginService)
	grpcServer := server.NewGRPCServer(confServer, logger, registerService, loginService)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
